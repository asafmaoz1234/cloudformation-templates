AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: ExampleApi
      Description: API Gateway for Example

  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: '{proxy+}'
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: <YOUR_SSL_CERTIFICATE_ARN>
      DomainName: example.com

  ApiGatewayBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName:
        Ref: ApiGatewayDomainName
      RestApiId:
        Ref: ApiGatewayRestApi
      Stage: Prod

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: <YOUR_LAMBDA_ROLE_ARN>
      FunctionName: ExampleLambda
      Code:
        S3Bucket: <YOUR_S3_BUCKET_NAME>
        S3Key: <YOUR_LAMBDA_S3_OBJECT_KEY>
      Runtime: nodejs14.x
